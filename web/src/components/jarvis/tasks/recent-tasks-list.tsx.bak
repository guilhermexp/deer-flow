"use client"
import React, { useState, useEffect } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { CheckCircle, Circle, Clock, Trash2, User, Hash } from "lucide-react"
import { cn } from "~/lib/utils"
import { Button } from "~/components/ui/button"
import { taskStorage, type Task } from "~/lib/task-utils"
import { formatDistanceToNow } from "date-fns"
import { ptBR } from "date-fns/locale"

export interface RecentTasksListProps {
  limit?: number
  showCompleted?: boolean
  onTaskUpdate?: (task: Task) => void
  className?: string
}

const RecentTasksList = React.memo(({ 
  limit = 5,
  showCompleted = true,
  onTaskUpdate,
  className 
}: RecentTasksListProps) => {
  const [tasks, setTasks] = useState<Task[]>([])
  const [loading, setLoading] = useState(true)

  const loadTasks = React.useCallback(() => {
    setLoading(true)
    try {
      let allTasks = taskStorage.getTasks()
      
      if (!showCompleted) {
        allTasks = allTasks.filter(t => !t.completed)
      }
      
      setTasks(allTasks.slice(0, limit))
    } catch (error) {
      console.error("Error loading tasks:", error)
    } finally {
      setLoading(false)
    }
  }, [limit, showCompleted, setTasks, setLoading])

  useEffect(() => {
    loadTasks()
    
    // Listen for storage changes (if tasks are updated in another component)
    const handleStorageChange = () => {
      loadTasks()
    }
    
    window.addEventListener('storage', handleStorageChange)
    return () => window.removeEventListener('storage', handleStorageChange)
  }, [loadTasks])

  const handleToggleComplete = async (task: Task) => {
    const updated = task.completed 
      ? taskStorage.uncompleteTask(task.id)
      : taskStorage.completeTask(task.id)
    
    if (updated) {
      loadTasks()
      onTaskUpdate?.(updated)
    }
  }

  const handleDelete = async (taskId: string) => {
    if (taskStorage.deleteTask(taskId)) {
      loadTasks()
    }
  }

  if (loading) {
    return (
      <div className={cn("space-y-2", className)}>
        {[...Array(3)].map((_, i) => (
          <div key={i} className="h-16 bg-muted/20 animate-pulse rounded-lg" />
        ))}
      </div>
    )
  }

  if (tasks.length === 0) {
    return (
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        className={cn("text-center py-8", className)}
      >
        <p className="text-muted-foreground text-sm">
          {showCompleted ? "Nenhuma tarefa ainda" : "Nenhuma tarefa pendente"}
        </p>
      </motion.div>
    )
  }

  return (
    <div className={cn("space-y-2", className)}>
      <AnimatePresence mode="popLayout">
        {tasks.map((task, index) => (
          <motion.div
            key={task.id}
            layout
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: 20 }}
            transition={{ 
              duration: 0.2,
              delay: index * 0.05,
              layout: { type: "spring", stiffness: 300, damping: 30 }
            }}
            className={cn(
              "group relative p-3 rounded-lg bg-background/50 border border-border/50",
              "hover:bg-muted/20 transition-colors duration-200",
              task.completed && "opacity-70"
            )}
          >
            <div className="flex items-start gap-3">
              <button
                onClick={() => handleToggleComplete(task)}
                className="mt-0.5 transition-colors duration-200"
                aria-label={task.completed ? "Marcar como pendente" : "Marcar como concluÃ­da"}
              >
                {task.completed ? (
                  <CheckCircle className="w-5 h-5 text-primary" />
                ) : (
                  <Circle className="w-5 h-5 text-muted-foreground hover:text-primary" />
                )}
              </button>
              
              <div className="flex-1 min-w-0">
                <p className={cn(
                  "text-sm font-medium",
                  task.completed && "line-through text-muted-foreground"
                )}>
                  {task.title}
                </p>
                
                <div className="flex items-center gap-3 mt-1 text-xs text-muted-foreground">
                  <span className="flex items-center gap-1">
                    <Clock className="w-3 h-3" />
                    {formatDistanceToNow(new Date(task.createdAt), { 
                      addSuffix: true,
                      locale: ptBR 
                    })}
                  </span>
                  
                  {task.assignee && (
                    <span className="flex items-center gap-1">
                      <User className="w-3 h-3" />
                      @{task.assignee}
                    </span>
                  )}
                  
                  {task.tags && task.tags.length > 0 && (
                    <span className="flex items-center gap-1">
                      <Hash className="w-3 h-3" />
                      {task.tags.join(", ")}
                    </span>
                  )}
                </div>
              </div>
              
              <Button
                variant="ghost"
                size="icon"
                className="h-7 w-7 opacity-0 group-hover:opacity-100 transition-opacity"
                onClick={() => handleDelete(task.id)}
                aria-label="Excluir tarefa"
              >
                <Trash2 className="h-3 w-3 text-destructive" />
              </Button>
            </div>
          </motion.div>
        ))}
      </AnimatePresence>
    </div>
  )
})

RecentTasksList.displayName = "RecentTasksList"

export default RecentTasksList